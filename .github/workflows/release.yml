name: Release

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: cargo test --verbose
      - name: Run clippy
        run: cargo clippy -- -D warnings

  get-version:
    name: Get next version
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    outputs:
      version: ${{ steps.semantic.outputs.version }}
      has-next-version: ${{ steps.semantic.outputs.version != '' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Semantic Release (dry-run)
        id: semantic
        uses: go-semantic-release/action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          dry: true

  build-linux:
    name: Build Linux binaries
    runs-on: ubuntu-latest
    needs: test
    if: always() && needs.test.result == 'success'
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross
      - name: Update Cargo.toml version
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          # Get version from get-version job if it exists
          if [ "${{ needs.get-version.outputs.has-next-version }}" == "true" ]; then
            sed -i 's/^version = ".*"/version = "${{ needs.get-version.outputs.version }}"/' Cargo.toml
          fi
      - name: Build for ${{ matrix.target }}
        run: cross build --release --target ${{ matrix.target }}
      - name: Create artifact
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/zfs_space_visualizer artifacts/zfs_space_visualizer-${{ matrix.target }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: zfs_space_visualizer-${{ matrix.target }}
          path: artifacts/zfs_space_visualizer-${{ matrix.target }}

  build-macos:
    name: Build macOS binaries
    runs-on: macos-latest
    needs: test
    if: always() && needs.test.result == 'success'
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      - name: Update Cargo.toml version
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          # Get version from get-version job if it exists
          if [ "${{ needs.get-version.outputs.has-next-version }}" == "true" ]; then
            sed -i '' 's/^version = ".*"/version = "${{ needs.get-version.outputs.version }}"/' Cargo.toml
          fi
      - name: Build for ${{ matrix.target }}
        run: cargo build --release --target ${{ matrix.target }}
      - name: Create artifact
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/zfs_space_visualizer artifacts/zfs_space_visualizer-${{ matrix.target }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: zfs_space_visualizer-${{ matrix.target }}
          path: artifacts/zfs_space_visualizer-${{ matrix.target }}

  release:
    name: Create release
    runs-on: ubuntu-latest
    needs: [get-version, build-linux, build-macos]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: write
    outputs:
      released: ${{ steps.semantic.outputs.version != '' }}
      version: ${{ steps.semantic.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "zfs_space_visualizer-*" -type f -exec cp {} release-assets/ \;
          ls -la release-assets/
      - name: Semantic Release
        id: semantic
        uses: go-semantic-release/action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          changelog-file: CHANGELOG.md
          update-file: Cargo.toml

      - name: Upload release assets
        if: steps.semantic.outputs.version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Upload all binary artifacts to the release
          for file in release-assets/zfs_space_visualizer-*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading $filename..."
              gh release upload "v${{ steps.semantic.outputs.version }}" "$file" --clobber
            fi
          done